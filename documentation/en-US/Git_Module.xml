<?xml version='1.0'?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN" "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
]>

<book>
    <xi:include href="Book_Info.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />

    <chapter id="GitModule-Introduction">
        <title>GIT Module Introduction</title>
        <para>
            The puppetmanaged.org GIT module allows you to manage GIT repositories, as well as clone repositories, and pull changes from repositories. In addition, it allows you to specify whether a repository should be reset and/or cleaned before attempting a pull, which gives you the ultimate flexibility.
        </para>
    </chapter>

    <chapter id="GitModule-Prerequisites">
        <title>Prerequisites</title>
        <para>
            There's a couple of requirements to the GIT module, in order for the module to function properly.
        </para>

        <section id="GitModule-Prerequisites-Clients">
            <title>Clients</title>
            <para>
                Nodes including the <literal>git::client</literal> class need to have the following packages available, or it's equivalent:
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <formalpara>
                            <title>git-core</title>
                            <para>
                                The GIT client programs such as <application>git-clone</application> and <application>git-pull</application>.
                            </para>
                        </formalpara>
                    </listitem>
                </itemizedlist>
            </para>
        </section>

        <section id="GitModule-Prerequisites-Servers">
            <title>Servers</title>
            <para>
                Nodes including the <literal>git::server</literal> class need to have the following packages available, or it's equivalent:
            </para>
            <para>
                <itemizedlist>
                    <listitem>
                        <formalpara>
                            <title>git-core</title>
                            <para>
                                The GIT client programs such as <application>git-init</application>, <application>git-clone</application> and <application>git-pull</application>.
                            </para>
                        </formalpara>
                    </listitem>
                    <listitem>
                        <formalpara>
                            <title>git-daemon</title>
                            <para>
                                The GIT daemon that enables sharing the GIT repositories over the network. There's no offline equivalent of <literal>git::repository</literal> available in this module, yet.
                            </para>
                        </formalpara>
                    </listitem>
                    <listitem>
                        <formalpara>
                            <title>xinetd</title>
                            <para>
                                The xinetd service
                            </para>
                        </formalpara>
                    </listitem>
                </itemizedlist>
            </para>

        </section>

    </chapter>

    <chapter id="GitModule-Installation">
        <title>Installation</title>

        <section id="GitModule-Installation-Upstream_Git_Repository">
            <title>Upstream GIT Repository</title>
            <para>
                Using the upstream GIT repository, you can choose between different upstream branches; <emphasis>development</emphasis>, <emphasis>testing</emphasis>, or <emphasis>production</emphasis>. These branches correspond with the environments the puppetmanaged.org puppetmaster offers to it's clients.
            </para>
            <para>
                The workflow in upstream GIT repository branches allows changes to first be applied to the <emphasis>development</emphasis>, then tested on a system that runs only this module, to see if the module itself works as expected. If the changes work as anticipated, they are pulled into the <emphasis>testing</emphasis> branch, and tested in conjunction with other modules (which may have changed as well) using a system that runs against the <emphasis>testing</emphasis> environment. If all is well, changes are pulled into the <emphasis>production</emphasis> branch.
            </para>
            <formalpara>
                <title>Without Staging</title>
                <para>
                    We recommend that if you do not use staging, you use the <emphasis>production</emphasis> branch of the module. However, changes to the production branch are not applied as rapidly compared to the <emphasis>development</emphasis> branch.
                </para>
            </formalpara>
            <para>
                To obtain a clone of the GIT repository, use:
            </para>
            <para>
                <screen>$ <userinput>git clone git://git.puppetmanaged.org/puppet/git</userinput></screen>
            </para>
            <para>
                Then, checkout the branch you want to use, if not <emphasis>development</emphasis>:
            </para>
            <para>
                <screen>$ <userinput>cd git/</userinput>
$ <userinput>git checkout --track -b <replaceable>production</replaceable> origin/<replaceable>production</replaceable></userinput></screen>
            </para>

            <section id="GitModule-Installation-Upstream_Git_Repository-Automatic_Updates">
                <title>Automatic Updates</title>
                <para>
                    If you used GIT to clone the repository, you can then use GIT to obtain updates to that module (and it's branches) by using:
                </para>
                <para>
                    <screen>$ <userinput>git pull</userinput></screen>
                </para>
            </section>

            <section id="GitModule-Installation-Upstream_Git_Repository-Full_Automation">
                <title>Fully Automation</title>
                <para>
                    Using the same method as the puppetmaster from puppetmanaged.org, you can also enable full automation. This includes offering three separate environments to the nodes, but it's up to you which environment is actually used.
                </para>
                <para>
                    Requires puppet-module-git (this module)
                </para>
                <para>
                    Requires environment staging
                </para>
                <para>
                    Requires patience
                </para>
            </section>

        </section>

        <section id="GitModule-Installation-Upstream_Packages">
            <title>Upstream Packages</title>
            <para>
                A little something about using the upstream packages.
            </para>

        </section>

    </chapter>

    <chapter id="GitModule-Implementation">
        <title>Implementation</title>
        <para>
            The GIT module manages, or can manage, the following resources by class or type definition:
        </para>
        <para>
            <itemizedlist>
                <title>Classes</title>
                <listitem>
                    <formalpara>
                        <title><code>git::client</code></title>
                        <para>
                            The class to include to make a node a git <emphasis>client</emphasis>, and install the necessary packages. Including this class will install the <application>git</application> package.
                        </para>
                    </formalpara>
                </listitem>
                <listitem>
                    <formalpara>
                        <title><code>git::server</code></title>
                        <para>
                            The class to include to make a node a git <emphasis>server</emphasis>, so that <emphasis>clients</emphasis> can clone, pull from and push to repositories on this server.
                        </para>
                    </formalpara>
                    <para>
                        Including the class will:
                        <orderedlist>
                            <listitem>
                                <para>
                                    install the <application>git-daemon</application> package,
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    start the <code>xinetd</code> service and enable it on boot,
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    start the <code>git</code> service and enable it on boot,
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    create a <filename>/git/</filename> directory for both the root of the <application>git-daemon</application> server daemon, and to enable pushing over <code>ssh://server/git/reponame/</code>.
                                </para>
                            </listitem>
                            <listitem>
                                <para>
                                    copy a bash script, <filename>/usr/local/bin/git_init_script</filename>, to the node, to enable repositories to be created from within puppet, using the <code>git::repository</code> definition. See also <xref linkend="GitModule-Customization-GitInitScript" />.
                                </para>
                            </listitem>
                        </orderedlist>
                    </para>
                </listitem>
            </itemizedlist>
        </para>
        <para>
            <itemizedlist id="GitModule-Implementation-TypeDefinitions">
                <title>Type Definitions</title>
                <listitem>
                    <formalpara id="GitModule-Implementation-TypeDefinitions-git_clone">
                        <title><code>git::clone</code></title>
                        <para>
                            The <code>git::clone</code> type performs exactly what it describes. It clones a repository given a source location and, optionally, a target directory. Possible parameters include
                            <itemizedlist>
                                <listitem>
                                    <formalpara id="GitModule-Implementation-TypeDefinitions-git_clone-source">
                                        <title>source</title>
                                        <para>
                                            Source URI of the repository to clone. This may be an absolute path for a locally available repository, or any of the following URI locators: http://, git://, ssh://
                                        </para>
                                    </formalpara>
                                    <para>
                                        <emphasis>Possible values</emphasis>: An absolute path, or any of the following URI locators: http://, git://, ssh://
                                    </para>
                                    <para>
                                        <emphasis>Default value</emphasis>: <code>false</code>
                                    </para>
                                </listitem>
                                <listitem>
                                    <formalpara id="GitModule-Implementation-TypeDefinitions-git_clone-localtree">
                                        <title>localtree</title>
                                        <para>
                                            The local tree (or <code>cwd</code>) in which the cloned repository is supposed to end up.
                                        </para>
                                    </formalpara>
                                    <para>
                                        <emphasis>Possible values</emphasis>: Any absolute path
                                    </para>
                                    <para>
                                        <emphasis>Default value</emphasis>: <filename>/srv/git/</filename>
                                    </para>
                                </listitem>
                                <listitem>
                                    <formalpara>
                                        <title>real_name</title>
                                        <para>
                                            The real name of the GIT repository. Because two repositories that may both be named "foo", the <code>real_name</code> attribute allows you to specify the real name of the tree without creating conflicts between two different equally named git repositories (to clone).
                                        </para>
                                    </formalpara>
                                    <para>
                                        The real name is applied as follows: When cloning, <code>git::clone</code> will take the repository <xref linkend="GitModule-Implementation-TypeDefinitions-git_clone-source" /> url and the name of the directory to clone to. When cloning a git repository called 'puppet-module-git' for example, which needs to end up as <filename>/var/lib/puppet/modules/git/</filename> maybe, setting <code>real_name => "git"</code> will cause <code>git::clone</code> to clone the 'puppet-module-git' repository into the 'git' directory below <xref linkend="GitModule-Implementation-TypeDefinitions-git_clone-localtree" />.
                                    </para>
                                </listitem>
                                <listitem>
                                    <formalpara>
                                        <title>branch</title>
                                        <para>
                                            To have the clone action checkout a specific branch, specify <code>branch</code>.
                                        </para>
                                    </formalpara>
                                    <para>
                                        <emphasis>Possible values</emphasis>: <code>false</code>, or any available branch in the git repository.
                                    </para>
                                    <para>
                                        <emphasis>Default value</emphasis>: <code>false</code>
                                    </para>
                                </listitem>
                            </itemizedlist>
                        </para>
                    </formalpara>
                    <para>
                        See also:
                    </para>
                </listitem>
                <listitem>
                    <formalpara>
                        <title><code>git::pull</code></title>
                        <para>
                            <itemizedlist>
                                <listitem>
                                    <formalpara>
                                        <title>localtree</title>
                                        <para>
                                            The local tree (or <code>cwd</code>) the pull is performed in. Note that the <code>name</code> (or <code>real_name</code>, if specified) of the resource is supposed to be the sub-directory of <code>localtree</code>. The actual <application>git pull</application> is then performed in <filename>$localtree/$name/</filename>, or <filename>$localtree/$real_name/</filename> if <code>real_name</code> is specified.
                                        </para>
                                    </formalpara>
                                </listitem>
                                <listitem>
                                    <formalpara>
                                        <title>real_name</title>
                                        <para>
                                            The real name of the GIT repository. Because two repositories that may both be named "foo", the <code>real_name</code> attribute allows you to specify the real name of the tree without creating conflicts between two different equally named git repositories (to pull from).
                                        </para>
                                    </formalpara>
                                    <para>
                                        The real name is applied as follows: When pulling, <code>git::pull</code> will navigate into the directory <filename>$localtree/$real_name/</filename>, instead of the default <filename>$localtree/$name/</filename>.
                                    </para>
                                </listitem>
                                <listitem>
                                    <formalpara>
                                        <title>reset</title>
                                        <para>
                                            This lets <code>git::pull</code> first reset the repository in order to avoid conflicts between any local changes that may not have been committed, and remote changes. Any changes to the local repository that have not been committed will be undone, except for files that are not tracked within the git repository.
                                        </para>
                                    </formalpara>
                                    <para>
                                        When performing a git reset, by default the <xref linkend="GitModule-Implementation-TypeDefinitions-git_reset" /> resource also performs a <xref linkend="GitModule-Implementation-TypeDefinitions-git_clean" />, unless <code>clean</code> is set to <code>false</code>.
                                    </para>
                                    <para>
                                        <emphasis>Possible values</emphasis>: <code>true</code>, <code>false</code>
                                    </para>
                                    <para>
                                        <emphasis>Default value</emphasis>: <code>true</code>
                                    </para>
                                </listitem>
                                <listitem>
                                    <formalpara>
                                        <title>clean</title>
                                        <para>
                                            This lets <code>git::pull</code> first clean the repository (using <xref linkend="GitModule-Implementation-TypeDefinitions-git_clean" />) in order to avoid conflicts between any local changes that may not have been committed, and remote changes. Any changes to the local repository that have not been committed will be undone, except for files that are not tracked within the git repository.
                                        </para>
                                    </formalpara>
                                    <para>
                                        <emphasis>Possible values</emphasis>: <code>true</code>, <code>false</code>
                                    </para>
                                    <para>
                                        <emphasis>Default value</emphasis>: <code>true</code>
                                    </para>
                                </listitem>
                                <listitem>
                                    <formalpara>
                                        <title>branch</title>
                                        <para>
                                            If specified, causes <code>git::pull</code> to perform a tracking git checkout of the branch if necessary.
                                        </para>
                                    </formalpara>
                                    <para>
                                        <emphasis>Possible values</emphasis>: <code>false</code>, or any existing branch
                                    </para>
                                    <para>
                                        <emphasis>Default value</emphasis>: <code>false</code>
                                    </para>
                                </listitem>
                            </itemizedlist>
                        </para>
                    </formalpara>
                    <para>
                        Note that a <code>git::pull</code> depends on a successful <xref linkend="GitModule-Implementation-TypeDefinitions-git_clone" /> and will perform a <code>git::clone</code> if the local clone has not already been performed.
                    </para>
                    <para>
                        See also: <xref linkend="GitModule-Implementation-TypeDefinitions-git_reset" />, <xref linkend="GitModule-Implementation-TypeDefinitions-git_clean" />, <xref linkend="GitModule-Implementation-TypeDefinitions-git_clone" />
                    </para>
                </listitem>
                <listitem>
                    <formalpara id="GitModule-Implementation-TypeDefinitions-git_reset">
                        <title><code>git::reset</code></title>
                        <para>
                            <itemizedlist>
                                <listitem>
                                    <formalpara>
                                        <title>localtree</title>
                                        <para>
                                            The local tree (or <code>cwd</code>) the reset is performed in. Note that the <code>name</code> (or <code>real_name</code>, if specified) of the resource is supposed to be the sub-directory of <code>localtree</code>. The actual <application>git reset</application> is then performed in <filename>$localtree/$name/</filename>, or <filename>$localtree/$real_name/</filename> if <code>real_name</code> is specified.
                                        </para>
                                    </formalpara>
                                </listitem>
                                <listitem>
                                    <formalpara>
                                        <title>real_name</title>
                                        <para>
                                            The real name of the GIT repository. Because two repositories that may both be named "foo", the <code>real_name</code> attribute allows you to specify the real name of the tree without creating conflicts between two different equally named git repositories (to reset).
                                        </para>
                                    </formalpara>
                                </listitem>
                                <listitem>
                                    <formalpara>
                                        <title>clean</title>
                                        <para>
                                            para
                                        </para>
                                    </formalpara>
                                </listitem>
                            </itemizedlist>
                        </para>
                    </formalpara>
                    <para>
                        See also:
                    </para>
                </listitem>
                <listitem>
                    <formalpara id="GitModule-Implementation-TypeDefinitions-git_clean">
                        <title><code>git::clean</code></title>
                        <para>
                            <itemizedlist>
                                <listitem>
                                    <formalpara>
                                        <title>localtree</title>
                                        <para>
                                            The local tree (or <code>cwd</code>) the clean is performed in. Note that the <code>name</code> (or <code>real_name</code>, if specified) of the resource is supposed to be the sub-directory of <code>localtree</code>. The actual <application>git clean</application> is then performed in <filename>$localtree/$name/</filename>, or <filename>$localtree/$real_name/</filename> if <code>real_name</code> is specified.
                                        </para>
                                    </formalpara>
                                </listitem>
                                <listitem>
                                    <formalpara>
                                        <title>real_name</title>
                                        <para>
                                            The real name of the GIT repository. Because two repositories that may both be named "foo", the <code>real_name</code> attribute allows you to specify the real name of the tree without creating conflicts between two different equally named git repositories (to clean).
                                        </para>
                                    </formalpara>
                                </listitem>
                            </itemizedlist>
                        </para>
                    </formalpara>
                    <para>
                        See also:
                    </para>
                </listitem>
                <listitem>
                    <formalpara>
                        <title><code>git::repository</code></title>
                        <para>
                            Available parameters:
                            <itemizedlist>
                                <listitem>
                                    <formalpara>
                                        <title><code>public</code></title>
                                        <para>
                                            Whether this repository is public (e.g. world readable) or not.
                                        </para>
                                    </formalpara>
                                    <para>
                                        <emphasis>Possible values</emphasis>: <code>true</code>, <code>false</code>.
                                    </para>
                                    <para>
                                        <emphasis>Default value</emphasis>: <code>false</code>
                                    </para>
                                </listitem>
                                <listitem>
                                    <formalpara>
                                        <title><code>shared</code></title>
                                        <para>
                                            Whether this repository is shared (e.g. group writeable) or not. This impacts the group writeability as follows:
                                        </para>
                                    </formalpara>
                                    <para>
                                        <screen>find /path/to/repo -type f -exec chmod g+w {} \;
find /path/to/repo -type d -exec chmod g+ws {} \;</screen>
                                    </para>
                                    <para>
                                        <emphasis>Possible values</emphasis>: <code>true</code>, <code>false</code>.
                                    </para>
                                    <para>
                                        <emphasis>Default value</emphasis>: <code>false</code>
                                    </para>
                                </listitem>
                                <listitem>
                                    <formalpara>
                                        <title><code>localtree</code></title>
                                        <para>
                                            The directory in which to create this repository. Note that localtree sets the base directory. A new directory with the name of the repository will be created in the directory you specify as <code>localtree</code>. See also <xref linkend="GitModule-Implementation-git_repository-prefix" />.
                                        </para>
                                    </formalpara>
                                    <para>
                                        <emphasis>Possible values</emphasis>: Any directory that exists on the system.
                                    </para>
                                    <para>
                                        <emphasis>Default value</emphasis>: <filename>/srv/git/</filename>
                                    </para>
                                </listitem>
                                <listitem>
                                    <formalpara>
                                        <title><code>owner</code></title>
                                        <para>
                                            The name of the user that owns the repository.
                                        </para>
                                    </formalpara>
                                    <para>
                                        <emphasis>Possible values</emphasis>: Any user on the system. If no user with username <literal>$owner</literal> exists, <literal>git::repository</literal> will create it.
                                    </para>
                                    <para>
                                        <emphasis>Default value</emphasis>: <code>root</code>
                                    </para>
                                </listitem>
                                <listitem>
                                    <formalpara>
                                        <title><code>group</code></title>
                                        <para>
                                            The name of the group that owns the repository. The <code>git::repository</code> type definition also ensures that this group exists on the system, but adds no members to the group.
                                        </para>
                                    </formalpara>
                                    <para>
                                        <emphasis>Possible values</emphasis>: Any group on the system, or if a non-existent group is specified, the group will be created.
                                    </para>
                                    <para>
                                        <emphasis>Default value</emphasis>: <code>root</code>
                                    </para>
                                </listitem>
                                <listitem>
                                    <formalpara id="GitModule-Implementation-git_repository-symlink_prefix">
                                        <title><code>symlink_prefix</code></title>
                                        <para>
                                            The symlink_prefix is prepended to the repository name when creating a symbolic link to the actual repository in the <filename>/git/</filename> directory. See also <xref linkend="GitModule-Implementation-git_repository-prefix" />, and <xref linkend="GitModule-ExampleUsage-git_repository-symlink_prefix" />
                                        </para>
                                    </formalpara>
                                    <para>
                                        <emphasis>Possible values</emphasis>: Any alphanumeric string.
                                    </para>
                                    <para>
                                        <emphasis>Default value</emphasis>: <code>false</code>
                                    </para>
                                </listitem>
                                <listitem>
                                    <formalpara id="GitModule-Implementation-git_repository-prefix">
                                        <title><code>prefix</code></title>
                                        <para>
                                            The prefix is prepended to the name of the repository. This creates a repository named <filename>$prefix-$name/</filename> instead of <filename>$name/</filename>. See also <xref linkend="GitModule-Implementation-git_repository-symlink_prefix" />, and <xref linkend="GitModule-ExampleUsage-git_repository-prefix" />
                                        </para>
                                    </formalpara>
                                    <para>
                                        <emphasis>Possible values</emphasis>: Any alphanumeric string.
                                    </para>
                                    <para>
                                        <emphasis>Default value</emphasis>: <code>false</code>
                                    </para>
                                </listitem>
                                <listitem>
                                    <formalpara id="GitModule-Implementation-git_repository-real_name">
                                        <title><code>real_name</code></title>
                                        <para>
                                            The real_name, if set, is used rather then the title of the instantiated <literal>git::repository</literal> type. Particularly useful when creating more then one <literal>git::repository</literal> with name "webserver", since the <literal>Git::Repository["webserver"]</literal> resource can only be created once.
                                        </para>
                                    </formalpara>
                                    <para>
                                        <emphasis>Possible values</emphasis>: Any alphanumeric string.
                                    </para>
                                    <para>
                                        <emphasis>Default value</emphasis>: <code>false</code>
                                    </para>
                                </listitem>
                                <listitem>
                                    <formalpara>
                                        <title><code>recipients</code></title>
                                        <para>
                                            An array of recipients, that end up in the git repository's commit list, used to notify people of commits via email.
                                        </para>
                                    </formalpara>
                                    <para>
                                        <emphasis>Possible values</emphasis>: An array of email addresses.
                                    </para>
                                    <para>
                                        <emphasis>Default value</emphasis>: <code>false</code>
                                    </para>
                                </listitem>
                                <listitem>
                                    <formalpara>
                                        <title><code>description</code></title>
                                        <para>
                                            The description of this repository.
                                        </para>
                                    </formalpara>
                                    <para>
                                        <emphasis>Possible values</emphasis>: Any description.
                                    </para>
                                    <para>
                                        <emphasis>Default value</emphasis>: <code>false</code>
                                    </para>
                                </listitem>
                            </itemizedlist>
                        </para>
                    </formalpara>
                    <para>
                        See also:
                    </para>
                </listitem>
            </itemizedlist>
        </para>
    </chapter>

    <chapter id="GitModule-Customization">
        <title>Customization</title>
        <para>
            The Git module allows several things to be customized.
        </para>

        <section id="GitModule-Customization-GitInitScript">
            <title>Customizing <code>git_init_script</code></title>
            <para>
                You can customize the <filename>/usr/local/bin/git_init_script</filename> by supplying another file in the domain specific or server specific tree. The <code>File["/usr/local/bin/git_init_script"]</code> resource polls the following sources, and uses the first hit it encounters:
            </para>
            <para>
                <orderedlist>
                    <listitem>
                        <para>
                            <code>puppet://$server/private/$environment/git/git_init_script,</code>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <code>puppet://$server/files/git/git_init_script</code>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <code>puppet://$server/git/git_init_script</code>
                        </para>
                    </listitem>
                </orderedlist>
            </para>
            <para>
                By default, the bash script that comes with the module is used. Customizing the <code>git_init_script</code> bash script requires you to supply the script at either the first (domain-specific) or the second (server specific) location.
            </para>
        </section>

        <section id="GitModule-Customization-PostCommitHook">
            <title>Customizing <code>post-commit</code></title>
            <para>
                The post-commit hook normally sends out messages to the email addresses in <filename>$GIT_DIR/commit-list</filename>, or otherwise uses the updates pushed to the GIT repository for one purpose or the other.
            </para>
            <para>
                The post-commit script with the Git module allows emails to be sent, containing the updates to the GIT repository, but you may have different requirements. The post-commit script is obtained from the following locations:
            </para>
            <para>
                <orderedlist>
                    <listitem>
                        <para>
                            <code>puppet://$server/private/$environment/git/post-commit,</code>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <code>puppet://$server/files/git/post-commit</code>
                        </para>
                    </listitem>
                    <listitem>
                        <para>
                            <code>puppet://$server/git/post-commit</code>
                        </para>
                    </listitem>
                </orderedlist>
            </para>

        </section>

    </chapter>

    <chapter id="GitModule-ExampleUsage">
        <title>Example Usage</title>
        <para>
        </para>

        <section id="GitModule-ExampleUsage-git_repository">
            <title>Example <code>git::repository</code> Usage</title>
            <para>
                The following is an example of <application>node1.example.org</application> that runs a git server with a git repository for <emphasis>program1</emphasis>, being developed by <emphasis>department</emphasis>, under the resposibility of <emphasis>manager</emphasis>.
            </para>
            <para>
                <screen>node '<replaceable>host1.example.org</replaceable>' {
    git::repository { "<replaceable>program1</replaceable>":
        owner => "<replaceable>manager</replaceable>",
        group => "<replaceable>department</replaceable>",
        public => <replaceable>false</replaceable>,
        shared => <replaceable>true</replaceable>,
        recipients => [ <replaceable>"department@example.org"</replaceable>, <replaceable>"manager@example.org"</replaceable> ],
        description => "<replaceable>SCM for program1</replaceable>"
    }
}</screen>
            </para>
            <para>
                This creates a <emphasis>bare</emphasis> git repository in <filename>/srv/git/program1/</filename>, and a symlink <filename>/git/program1 => /srv/git/program1/</filename>. The script sets the ownership of <filename>/srv/git/program1/</filename> to <code>manager:department</code>, and the mode to <code>2770</code> so that the users that are a member of the <code>department</code> group can write to the directory (which is necessary to push), but no other user can check out the repository. Note that for group write access, <code>shared</code> should be set to <code>true</code> as shown in the example.
            </para>
            <para>
                If one or more commits are pushed to the repository, the email addresses specified in the <code>recipients</code> parameter to the <code>git::repository</code> type will get a notification via email, including a <emphasis>diff</emphasis>.
            </para>

            <section id="GitModule-ExampleUsage-git_repository-symlink_prefix">
                <title>Using the <code>symlink_prefix</code> attribute</title>
                <para>
                    The <code>symlink_prefix</code> attribute can be used to allow multiple equally named git repositories in different locations on the system to be symlinked in <filename>/git/</filename> without conflicting with the other git repository with the same name. In particular, the <code>$name</code> variable remains the same so that within the <code>git::repository</code> type definition it can be used as-is.
                </para>
                <para>
                    The <code>symlink_prefix</code> attribute is used as follows:
                </para>
                <para>
                    <screen>node '<replaceable>node1.example.org</replaceable>' {
    # GIT repositories for puppet modules
    git::repository { [
            "git",
            "puppet",
            "webserver"
        ]:
        symlink_prefix => "<replaceable>puppet-module</replaceable>",
        public => <replaceable>true</replaceable>,
        shared => <replaceable>true</replaceable>,
        group => "<replaceable>contributors</replaceable>",
        localtree => "<replaceable>/data/scm/git/git.puppetmanaged.org/</replaceable>",
        recipients => [ "<replaceable>contributors@example.org"</replaceable> ]
    }
}</screen>
                </para>
                <para>
                    Note how it defines more repositories, and puts them in <filename>/data/scm/git/git.puppetmanaged.org/</filename>, with group ownership for <code>contributors</code>. Normally, a symlink such as <filename>/git/webserver => /data/scm/git/git.puppetmanaged.org/webserver/</filename> would be created, but if we did that, then no other git repository can be named <code>webserver</code> anymore. Given that we specify a <code>symlink_prefix</code> of <code>puppet-module</code>, the symbolic link created will be <filename>/git/puppet-module-webserver => /data/scm/git/git.puppetmanaged.org/webserver/</filename>. See the <xref linkend="GitModule-FAQ-Whats_The_Use_Of_The_Symlink_Prefix_Attribute" /> FAQ for more details.
                </para>
            </section>

            <section id="GitModule-ExampleUsage-git_repository-prefix">
                <title>Using the <code>prefix</code> attribute</title>
                <para>
                    The <code>prefix</code> attribute is used to prepend a string to the <emphasis>name</emphasis> of the git repository. Note that this attribute in fact replaces <code>$name</code> as far as repository locations and symbolic links is concerned, while the <code>$name</code> variable remains available within the <code>git::repository</code> type definition.
                </para>
                <para>
                    This attribute comes to life when the <code>$name</code> variable needs to be used inside the <code>git::repository</code> type definition, but the repository's location and symbolic links to that location need to be prepended.
                </para>
                <para>
                    The <code>prefix</code> attribute is prepended to the name of the repository. Below is an example use of the <code>prefix</code> parameter.
                </para>
                <para>
                    <screen>node '<replaceable>node1.example.org</replaceable>' {
    # Git repositories for puppet modules
    git::repository { [
            "git",
            "puppet",
            "webserver"
        ]:
        symlink_prefix => "<replaceable>puppet</replaceable>",
        prefix => "<replaceable>module</replaceable>",
        public => <replaceable>true</replaceable>,
        shared => <replaceable>true</replaceable>,
        group => "<replaceable>contributors</replaceable>",
        localtree => "<replaceable>/data/scm/git/git.puppetmanaged.org/</replaceable>",
        recipients => [ <replaceable>"contributors@example.org"</replaceable> ]
    }
}</screen>
                </para>
                <para>
                    Now, the git repository <code>webserver</code> will be created as <filename>/data/scm/git/git.puppetmanaged.org/module-webserver/</filename>, as well as a symbolic link <filename>/git/puppet-module-webserver => /data/scm/git/git.puppetmanaged.org/module-webserver/</filename>.
                </para>
            </section>

        </section>

    </chapter>

    <chapter id="GitModule-Extension">
        <title>Extension</title>
        <para>
            A little something about extending the module
        </para>
    </chapter>

    <chapter id="GitModule-FAQ">
        <title>FAQ</title>
        <para>
            Frequently asked questions
        </para>

        <formalpara id="GitModule-FAQ-Whats_The_Use_Of_The_Symlink_Prefix_Attribute">
            <title>What's the use of <literal>symlink_prefix</literal>?</title>
            <para>
                Getting back to the example usage of <literal>git::repository</literal>:
            </para>
        </formalpara>
        <para>
            <screen>node 'node1.example.org' {
    git::repository { "git.puppetmanaged.org-webserver":
        symlink_prefix => "<replaceable>puppet-module</replaceable>",
        real_name => "webserver",
        public => <replaceable>true</replaceable>,
        shared => <replaceable>true</replaceable>,
        group => "<replaceable>contributors</replaceable>",
        localtree => "<replaceable>/data/scm/git/git.puppetmanaged.org/</replaceable>",
        recipients => [ "<replaceable>contributors@example.org"</replaceable> ]
    }
}</screen>
        </para>
        <para>
            The <literal>symlink_prefix</literal> causes a symbolic link to be created in <filename>/git/</filename>, named <filename>puppet-module-webserver</filename>. The symbolic link looks like this:
        </para>
        <para>
            <screen><filename>/git/puppet-module-webserver</filename> => <filename>/data/scm/git/git.puppetmanaged.org/webserver/</filename></screen>
        </para>
        <para>
            This creates the opportunity to create another GIT repository named <literal>webserver</literal> in a different path:
        </para>
        <para>
            <screen>node 'node1.example.org' {
    git::repository { "git.school.org-webserver":
        symlink_prefix => "<replaceable>school-project</replaceable>",
        real_name => "webserver",
        public => <replaceable>false</replaceable>,
        shared => <replaceable>true</replaceable>,
        group => "<replaceable>students</replaceable>",
        localtree => "<replaceable>/data/scm/git/git.school.org/</replaceable>",
        recipients => [ "<replaceable>students@example.org"</replaceable> ]
    }
}</screen>
        </para>
        <para>
            Because puppet allows the instantation of a type only once, you cannot create multiple <literal>Git::Repository["webserver"]</literal> resources. Use the <literal>real_name</literal> attribute to <literal>git::repository</literal> to set the repository's real name (e.g. <emphasis>webserver</emphasis>).
        </para>

        <formalpara id="GitModule-FAQ-Whats_The_Use_Of_The_Prefix_Attribute">
            <title>What's the use of the <literal>prefix</literal> attribute?</title>
            <para>
                When defining multiple GIT repositories, such as for domain specific configuration trees, or when using the <literal>git::repository::domain</literal> type, the <literal>prefix</literal> attribute helps because the title of the resource is used in several places, while the <literal>prefix</literal> enables distinction between, say, git repositories for modules and git repositories for domain specific configuration trees.
            </para>
        </formalpara>

        <formalpara id="GitModule-FAQ-Can_I_Combine_The_Symlink_Prefix_And_Prefix_Attributes">
            <title>Can I combine the <literal>symlink_prefix</literal> and <literal>prefix</literal> attributes?</title>
            <para>
                Yes you can. Note however that the <literal>$prefix</literal> yada yada
            </para>
        </formalpara>

        <formalpara>
            <title>Question?</title>
            <para>
                Answer
            </para>
        </formalpara>
    </chapter>

    <chapter id="GitModule-TODO">
        <title>TODO</title>
        <para>
            <itemizedlist>
                <listitem>
                    <para>
                        Enable offline use of git::repository (not include git::server)
                    </para>
                </listitem>
            </itemizedlist>
        </para>
    </chapter>

    <xi:include href="Appendix.xml" xmlns:xi="http://www.w3.org/2001/XInclude" />
</book>

